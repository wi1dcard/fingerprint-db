name: Generate fingerprints

on:
  push:
    branches: ["master"]

jobs:
  build-echoserver:
    name: Build Fingerproxy echoserver
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: "0"
      GOARCH: amd64
      BUILD_DIR: ./example/echo-server
    steps:
      - uses: actions/checkout@v4
        with:
          repository: wi1dcard/fingerproxy

      - uses: actions/setup-go@v5
        with:
          go-version: ~1.21.0

      # filenames are according to os matrix below
      - run: ./testdata/gencert.sh
      - run: GOOS=linux go build -o echoserver_ubuntu-22.04 $BUILD_DIR
      - run: GOOS=windows go build -o echoserver_windows-2022 $BUILD_DIR
      - run: GOOS=darwin go build -o echoserver_macos-13 $BUILD_DIR

      - uses: actions/upload-artifact@v4
        with:
          name: echoserver
          path: |
            echoserver_*
            tls.crt
            tls.key

  aggregate-json:
    name: Aggregate
    runs-on: ubuntu-latest
    needs:
      - golang
      - curl
      - curl-mingw
      - curl-container
      # ...
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: fingerprint_*.json
          merge-multiple: true

      - run: |
          jq -s . fingerprint_*.json > aggregated.json
          {
            echo '```json'
            cat aggregated.json
            echo '```'
          } > $GITHUB_STEP_SUMMARY

      - uses: actions/upload-artifact@v4
        with:
          name: aggregated.json
          path: aggregated.json

  golang:
    name: Golang
    runs-on: ${{ matrix.os }}
    needs: build-echoserver
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-13]
        version:
          - ~1.16.0
          - ~1.20.0
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        id: setup
        with:
          go-version: ${{ matrix.version }}
          cache: false

      - uses: ./.github/fingerprint-action
        with:
          echoserver-filename: ./echoserver_${{ matrix.os }}
          unique-platform-id: go-${{ steps.setup.outputs.go-version }}-${{ matrix.os }}
          run: cd go && go run ./main.go && mv fingerprint.json ..

  curl:
    name: Curl
    runs-on: ${{ matrix.os }}
    needs: build-echoserver
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-13]
    steps:
      - uses: actions/checkout@v4

      - if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          curl -o curl.zip https://curl.se/windows/dl-8.6.0_1/curl-8.6.0_1-win64-mingw.zip
          unzip curl.zip
          mv ./curl-*/bin/* /mingw64/bin

      - uses: ./.github/fingerprint-action
        with:
          echoserver-filename: ./echoserver_${{ matrix.os }}
          unique-platform-id: curl-${{ matrix.os }}
          run: ./curl/curl.sh --http2

  curl-mingw:
    name: Curl mingw
    runs-on: ${{ matrix.os }}
    needs: build-echoserver
    strategy:
      matrix:
        os: [windows-2022]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/fingerprint-action
        with:
          echoserver-filename: ./echoserver_${{ matrix.os }}
          unique-platform-id: curl-mingw-${{ matrix.os }}
          run: ./curl/curl.sh

  curl-container:
    name: Curl container
    runs-on: ubuntu-22.04
    needs: build-echoserver
    strategy:
      matrix:
        image:
          - ubuntu:18.04
          - ubuntu:20.04
          - ubuntu:22.04
          - debian:12
          - debian:11
          - debian:10
          - centos:6
          - centos:7
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/fingerprint-action
        with:
          echoserver-filename: ./echoserver_ubuntu-22.04
          unique-platform-id: curl-container-${{ matrix.image }}
          run: |
            [[ "${{ matrix.image }}" = centos:* ]] && HTTP2="" || HTTP2="--http2"

            docker run --add-host=host.docker.internal:host-gateway \
              --rm -v $PWD:/src ${{ matrix.image }} \
              bash -c "cd /src && ./curl/curl-container.sh $HTTP2"

  python-container:
    name: Python container
    runs-on: ubuntu-22.04
    needs: build-echoserver
    strategy:
      matrix:
        image:
          - python:3.12-bookworm
          - python:3.8-bookworm
          - python:3.12-bullseye
          - python:3.8-bullseye
          - python:3.12-alpine
          - python:3.8-alpine
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/fingerprint-action
        with:
          echoserver-filename: ./echoserver_ubuntu-22.04
          unique-platform-id: python-container-${{ matrix.image }}
          run: |
            docker run --add-host=localhost:host-gateway \
              --rm -v $PWD:/src ${{ matrix.image }} \
              sh -c "cd /src && ./python/httpclient.sh"

            docker run --add-host=localhost:host-gateway \
              --rm -v $PWD:/src ${{ matrix.image }} \
              sh -c "cd /src && pip install requests && ./python/with-requests.sh"
